version: '3.8'

services:
  # User Service
  userservice:
    build:
      context: .
      dockerfile: Services/UserService/Dockerfile
    container_name: userservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "5001:8080"
    networks:
      - microservices-network
    restart: unless-stopped

  # Order Service
  orderservice:
    build:
      context: .
      dockerfile: Services/OrderService/Dockerfile
    container_name: orderservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "5002:8080"
    networks:
      - microservices-network
    depends_on:
      - rabbitmq
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      timeout: 30s
      interval: 30s
      retries: 3

  # Web Client
  webclient:
    build:
      context: WebClient
      dockerfile: Dockerfile
    container_name: webclient
    networks:
      - microservices-network
    restart: unless-stopped

  # NGINX API Gateway
  nginx-gateway:
    build:
      context: Gateway/nginx
      dockerfile: Dockerfile
    container_name: nginx-gateway
    ports:
      - "8080:80"
    depends_on:
      - userservice
      - orderservice
      - webclient
    networks:
      - microservices-network
    restart: unless-stopped

volumes:
  rabbitmq_data:

networks:
  microservices-network:
    driver: bridge